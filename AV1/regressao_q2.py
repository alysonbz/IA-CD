import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# 1. Carregar o dataset ajustado
df = pd.read_csv("regressao_ajustado.csv")

# 2. Selecionar a vari√°vel mais correlacionada com a vari√°vel-alvo
target = 'Y house price of unit area'
correlations = df.corr(numeric_only=True)[target].drop(target).sort_values(ascending=False)
top_feature = correlations.index[0]
print(f"‚úÖ Feature mais correlacionada com '{target}': {top_feature} (correla√ß√£o = {correlations[0]:.3f})")

# 3. Preparar dados para regress√£o
X = df[[top_feature]].values  # vari√°vel explicativa
y = df[target].values         # vari√°vel alvo

# 4. Aplicar Regress√£o Linear
model = LinearRegression()
model.fit(X, y)
y_pred = model.predict(X)

# 6. Calcular m√©tricas de desempenho
rmse = np.sqrt(mean_squared_error(y, y_pred))
r2 = r2_score(y, y_pred)
print(f"üìä RMSE: {rmse:.4f}")
print(f"üìà R¬≤: {r2:.4f}")

# 7. Coment√°rio sobre os resultados
print("\nüìå Coment√°rio:")
if r2 > 0.7:
    print(f"A vari√°vel '{top_feature}' tem uma boa explica√ß√£o sobre a varia√ß√£o do pre√ßo, com R¬≤ = {r2:.2f}.")
elif r2 > 0.4:
    print(f"A vari√°vel '{top_feature}' tem uma explica√ß√£o moderada sobre o pre√ßo. O modelo captura parcialmente a varia√ß√£o.")
else:
    print(f"A vari√°vel '{top_feature}' explica pouco da varia√ß√£o no pre√ßo (R¬≤ = {r2:.2f}). Considere m√∫ltiplas vari√°veis para melhor desempenho.")
# 5. Plotar a reta de regress√£o
plt.figure(figsize=(8, 5))
plt.scatter(X, y, color='blue', alpha=0.5, label='Dados reais')
plt.plot(X, y_pred, color='red', label='Reta de regress√£o')
plt.xlabel(top_feature)
plt.ylabel(target)
plt.title("Regress√£o Linear Simples")
plt.legend()
plt.grid(True)
plt.show()


